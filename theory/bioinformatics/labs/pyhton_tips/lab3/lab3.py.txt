# ---------------------------------
# PageRank algorithm - Solution
# ---------------------------------

# Import the 'sys' standard module for accessing command line arguments using
# the sys.argv variable.
import sys


def load_webpages(pages_file_path):
    # Open the input file.
    fp = open(pages_file_path, 'r')

    # Load the hyper-texts and the links connecting them.
    webpages = {}
    for line in fp:
        line = line.strip()
        if line:
            pages = line.split()
            src_page = pages[0]
            dst_pages = pages[1:]
            if src_page not in webpages:
                webpages[src_page] = []
            for page in dst_pages:
                webpages[src_page].append(page)

    # Close the file.
    fp.close()

    return webpages


def initialize_data(webpages,
                    damping):
    # Assign to each webpage a unique integer identifier.
    webpage_ids = {}
    for webpage in webpages:
        webpage_ids[webpage] = len(webpage_ids)

    # Compute the adjacency matrix.
    adjacency = []
    for i in range(len(webpages)):
        adjacency.append([0] * len(webpages))
    for src_page in webpages:
        src_page_id = webpage_ids[src_page]
        for dst_page in webpages[src_page]:
            dst_page_id = webpage_ids[dst_page]
            adjacency[dst_page_id][src_page_id] = 1 / len(webpages[src_page])

    # Compute the Google matrix.
    google = []
    for i in range(len(webpages)):
        google.append([0] * len(webpages))
    for i in range(len(webpages)):
        for j in range(len(webpages)):
            google[i][j] = (1 - damping) * adjacency[i][j]
            google[i][j] += damping / len(webpages)

    # Compute the pagerank vector
    ranks = [1 / len(webpages)] * len(webpages)

    return google, ranks


def step(google, ranks):
    next_ranks = [0] * len(google)
    for i in range(len(google)):
        for j in range(len(google)):
            next_ranks[i] += google[i][j] * ranks[j]

    return next_ranks


def main():
    # Parse command line arguments.
    pages_file_path = sys.argv[1]
    n_iterations = int(sys.argv[2])
    damping = float(sys.argv[3])

    # Initialize the system to be simulated.
    webpages = load_webpages(pages_file_path)
    google, ranks = initialize_data(webpages, damping)

    # Simulate the generations.
    for iteration in range(n_iterations):
        print(f'Iteration {iteration} : {ranks}')
        ranks = step(google, ranks)


if __name__ == '__main__':
    # Check the proper number of arguments are provided through the command
    # line.
    if len(sys.argv) != 4:
        raise RuntimeError(f'Expected 4 command line arguments, got '
                           f'{len(sys.argv)}')

    print('Run main functions')
    main()
    print('Finish')